disabled dot output: use ./ to parse relative files starting with a colon.
parsing 'test/parser/array07.mod'...
successfully parsed.
  AST:
    CAstScope: 'array07'
      symbol table:
        [[
          [ *Add(<ptr(8) to array of array of <integer>>>>,<ptr(8) to array of array of <integer>>>>,<ptr(8) to array of array of <integer>>>>) --> <NULL>           ]
          [ *DIM(<ptr(8) to <NULL>>,<integer>) --> <integer>           ]
          [ *DOFS(<ptr(8) to <NULL>>) --> <integer>           ]
          [ *Init(<ptr(8) to array of array of <integer>>>>) --> <NULL>           ]
          [ *Print(<ptr(8) to array of array of <integer>>>>) --> <NULL>           ]
          [ *ReadInt() --> <integer>           ]
          [ *ReadLong() --> <longint>           ]
          [ *Test() --> <NULL>           ]
          [ *WriteChar(<char>) --> <NULL>           ]
          [ *WriteInt(<integer>) --> <NULL>           ]
          [ *WriteLn() --> <NULL>           ]
          [ *WriteLong(<longint>) --> <NULL>           ]
          [ *WriteStr(<ptr(8) to array of <char>>>) --> <NULL>           ]
          [ @sum      array 5 of array 5 of <integer>>>         sum           ]
        ]]
      statement list:
        call [ *Test() --> <NULL> ] <NULL>
        call [ *Print(<ptr(8) to array of array of <integer>>>>) --> <NULL> ] <NULL>
          &() <INVALID>
            [ @sum      array 5 of array 5 of <integer>>>         sum ] array 5 of array 5 of <integer>>>
      nested scopes:
        CAstScope: 'Print'
          symbol table:
            [[
              [ $M        <integer>               ]
              [ $N        <integer>               ]
              [ %a        <ptr(8) to array of array of <integer>>>>               ]
              [ $i        <integer>               ]
              [ $j        <integer>               ]
            ]]
          statement list:
            := <integer>
              [ $N        <integer> ] <integer>
              call [ *DIM(<ptr(8) to <NULL>>,<integer>) --> <integer> ] <integer>
                [ %a        <ptr(8) to array of array of <integer>>>> ] <ptr(8) to array of array of <integer>>>>
                1 <integer>
            := <integer>
              [ $M        <integer> ] <integer>
              call [ *DIM(<ptr(8) to <NULL>>,<integer>) --> <integer> ] <integer>
                [ %a        <ptr(8) to array of array of <integer>>>> ] <ptr(8) to array of array of <integer>>>>
                2 <integer>
            := <integer>
              [ $i        <integer> ] <integer>
              0 <integer>
            while cond
              < <integer>
                [ $i        <integer> ] <integer>
                [ $N        <integer> ] <integer>
            while-body
              := <integer>
                [ $j        <integer> ] <integer>
                0 <integer>
              while cond
                < <integer>
                  [ $j        <integer> ] <integer>
                  [ $M        <integer> ] <integer>
              while-body
                call [ *WriteInt(<integer>) --> <NULL> ] <NULL>
                  [ %a        <ptr(8) to array of array of <integer>>>> ] <INVALID>
                    [ $i        <integer> ] <integer>
                    [ $j        <integer> ] <integer>
                := <integer>
                  [ $j        <integer> ] <integer>
                  add <integer>
                    [ $j        <integer> ] <integer>
                    1 <integer>
              := <integer>
                [ $i        <integer> ] <integer>
                add <integer>
                  [ $i        <integer> ] <integer>
                  1 <integer>
          nested scopes:
            empty.
        
        CAstScope: 'Init'
          symbol table:
            [[
              [ $M        <integer>               ]
              [ $N        <integer>               ]
              [ %a        <ptr(8) to array of array of <integer>>>>               ]
              [ $c        <integer>               ]
              [ $i        <integer>               ]
              [ $j        <integer>               ]
            ]]
          statement list:
            := <integer>
              [ $N        <integer> ] <integer>
              call [ *DIM(<ptr(8) to <NULL>>,<integer>) --> <integer> ] <integer>
                [ %a        <ptr(8) to array of array of <integer>>>> ] <ptr(8) to array of array of <integer>>>>
                1 <integer>
            := <integer>
              [ $M        <integer> ] <integer>
              call [ *DIM(<ptr(8) to <NULL>>,<integer>) --> <integer> ] <integer>
                [ %a        <ptr(8) to array of array of <integer>>>> ] <ptr(8) to array of array of <integer>>>>
                2 <integer>
            := <integer>
              [ $c        <integer> ] <integer>
              0 <integer>
            := <integer>
              [ $i        <integer> ] <integer>
              0 <integer>
            while cond
              < <integer>
                [ $i        <integer> ] <integer>
                [ $N        <integer> ] <integer>
            while-body
              := <integer>
                [ $j        <integer> ] <integer>
                0 <integer>
              while cond
                < <integer>
                  [ $j        <integer> ] <integer>
                  [ $M        <integer> ] <integer>
              while-body
                := <INVALID>
                  [ %a        <ptr(8) to array of array of <integer>>>> ] <INVALID>
                    [ $i        <integer> ] <integer>
                    [ $j        <integer> ] <integer>
                  [ $c        <integer> ] <integer>
                := <integer>
                  [ $c        <integer> ] <integer>
                  add <integer>
                    [ $c        <integer> ] <integer>
                    1 <integer>
                := <integer>
                  [ $j        <integer> ] <integer>
                  add <integer>
                    [ $j        <integer> ] <integer>
                    1 <integer>
              := <integer>
                [ $i        <integer> ] <integer>
                add <integer>
                  [ $i        <integer> ] <integer>
                  1 <integer>
          nested scopes:
            empty.
        
        CAstScope: 'Add'
          symbol table:
            [[
              [ $M        <integer>               ]
              [ $N        <integer>               ]
              [ $c        <integer>               ]
              [ %d        <ptr(8) to array of array of <integer>>>>               ]
              [ $i        <integer>               ]
              [ $j        <integer>               ]
              [ %s1       <ptr(8) to array of array of <integer>>>>               ]
              [ %s2       <ptr(8) to array of array of <integer>>>>               ]
            ]]
          statement list:
            := <integer>
              [ $N        <integer> ] <integer>
              call [ *DIM(<ptr(8) to <NULL>>,<integer>) --> <integer> ] <integer>
                [ %d        <ptr(8) to array of array of <integer>>>> ] <ptr(8) to array of array of <integer>>>>
                1 <integer>
            := <integer>
              [ $M        <integer> ] <integer>
              call [ *DIM(<ptr(8) to <NULL>>,<integer>) --> <integer> ] <integer>
                [ %d        <ptr(8) to array of array of <integer>>>> ] <ptr(8) to array of array of <integer>>>>
                2 <integer>
            := <integer>
              [ $c        <integer> ] <integer>
              0 <integer>
            := <integer>
              [ $i        <integer> ] <integer>
              0 <integer>
            while cond
              < <integer>
                [ $i        <integer> ] <integer>
                [ $N        <integer> ] <integer>
            while-body
              := <integer>
                [ $j        <integer> ] <integer>
                0 <integer>
              while cond
                < <integer>
                  [ $j        <integer> ] <integer>
                  [ $M        <integer> ] <integer>
              while-body
                := <INVALID>
                  [ %d        <ptr(8) to array of array of <integer>>>> ] <INVALID>
                    [ $i        <integer> ] <integer>
                    [ $j        <integer> ] <integer>
                  add <integer>
                    [ %s1       <ptr(8) to array of array of <integer>>>> ] <INVALID>
                      [ $i        <integer> ] <integer>
                      [ $j        <integer> ] <integer>
                    [ %s2       <ptr(8) to array of array of <integer>>>> ] <INVALID>
                      [ $i        <integer> ] <integer>
                      [ $j        <integer> ] <integer>
                := <integer>
                  [ $c        <integer> ] <integer>
                  add <integer>
                    [ $c        <integer> ] <integer>
                    1 <integer>
                := <integer>
                  [ $j        <integer> ] <integer>
                  add <integer>
                    [ $j        <integer> ] <integer>
                    1 <integer>
              := <integer>
                [ $i        <integer> ] <integer>
                add <integer>
                  [ $i        <integer> ] <integer>
                  1 <integer>
          nested scopes:
            empty.
        
        CAstScope: 'Test'
          symbol table:
            [[
              [ $a        array 5 of array 5 of <integer>>>               ]
              [ $b        array 5 of array 5 of <integer>>>               ]
              [ $c        array 5 of <integer>>               ]
            ]]
          statement list:
            call [ *Init(<ptr(8) to array of array of <integer>>>>) --> <NULL> ] <NULL>
              &() <INVALID>
                [ $a        array 5 of array 5 of <integer>>> ] array 5 of array 5 of <integer>>>
            call [ *Init(<ptr(8) to array of array of <integer>>>>) --> <NULL> ] <NULL>
              &() <INVALID>
                [ $b        array 5 of array 5 of <integer>>> ] array 5 of array 5 of <integer>>>
            call [ *Add(<ptr(8) to array of array of <integer>>>>,<ptr(8) to array of array of <integer>>>>,<ptr(8) to array of array of <integer>>>>) --> <NULL> ] <NULL>
              &() <INVALID>
                [ $a        array 5 of array 5 of <integer>>> ] array 5 of array 5 of <integer>>>
              &() <INVALID>
                [ $b        array 5 of array 5 of <integer>>> ] array 5 of array 5 of <integer>>>
              &() <INVALID>
                [ @sum      array 5 of array 5 of <integer>>>         sum ] array 5 of array 5 of <integer>>>
          nested scopes:
            empty.
        
    


Done.
